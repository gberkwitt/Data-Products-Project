tail(sort(leverage),3)
influential <- dfbetas(bestmodel)
tail(sort(influential[,6]),3)
t.test(mpg ~ am, data = mtcars)
pairs(mpg ~ ., data = mtcars)
boxplot(mpg ~ am, data = mtcars, col = (c("red","blue")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
boxplot(mpg ~ am, data = mtcars, col = (c("magenta","blue")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
boxplot(mpg ~ am, data = mtcars, col = (c("magenta","blue")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
boxplot(mpg ~ am, data = mtcars, col = (c("blue","magenta")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling", lib="C:/Program Files/R/R-3.2.1/library")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
install.packages("Hmisc", lib="C:/Program Files/R/R-3.2.1/library")
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
library("Hmisc", lib.loc="C:/Program Files/R/R-3.2.1/library")
detach("package:Formula", unload=TRUE)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.1/library")
install.packages("ggplot2", lib="C:/Program Files/R/R-3.2.1/library")
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
library("Hmisc", lib.loc="C:/Program Files/R/R-3.2.1/library")
install.packages("Hmisc", lib="C:/Program Files/R/R-3.2.1/library")
install.packages("ggplot2", lib="C:/Program Files/R/R-3.2.1/library")
data(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$BlastFurnaceSlag, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Water, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Superplasticizer, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$CoarseAggregate, g=breaks))
library(AppliedPredictiveModeling)
q
qplot(index, CompressiveStrength, data=training, color=cut2(training$Age, g=breaks))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, breaks=20)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
ProcPCA$numComp
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
ProcPCA$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433) data(AlzheimerDisease)
set.seed(3432) data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
install.packages("e1071", lib="C:/Program Files/R/R-3.2.1/library")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret))
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7,
list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(rattle)
install.package(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
library(ElemStatLearn)
install.packages("AppliedPredictiveModeling", lib="C:/Program Files/R/R-3.2.1/library")
install.packages("ElemStatLearn", lib="C:/Program Files/R/R-3.2.1/library")
install.packages(c("car", "caret", "fields", "lme4", "lubridate", "maps", "quantreg", "RcppEigen", "RCurl", "rJava", "shiny", "swirl", "tidyr", "TTR", "XML", "xtable"))
install.packages(c("base64enc", "BH", "boot", "class", "cluster", "codetools", "crayon", "curl", "devtools", "digest", "evaluate", "foreign", "formatR", "git2r", "gridExtra", "gtable", "highr", "htmltools", "httr", "jsonlite", "knitr", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "packrat", "PKI", "plotrix", "R6", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "rsconnect", "rstudioapi", "rversions", "spatial", "stringi", "testthat", "xml2"), lib="C:/Program Files/R/R-3.2.1/library")
install.packages("pgmm", lib="C:/Program Files/R/R-3.2.1/library")
install.packages("pgmm", lib="C:/Program Files/R/R-3.2.1/library")
install.packages("rpart", lib="C:/Program Files/R/R-3.2.1/library")
install.packages("gbm", lib="C:/Program Files/R/R-3.2.1/library")
install.packages("forecast", lib="C:/Program Files/R/R-3.2.1/library")
install.packages("e1071", lib="C:/Program Files/R/R-3.2.1/library")
library("gbm", lib.loc="C:/Program Files/R/R-3.2.1/library")
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
data("vowel.test")
head(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
dim(vowel.train); dim(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
library(gbm)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
library(caret)
library("caret", lib.loc="~/R/win-library/3.2")
library(caret)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
library(gbm)
library(ElemStatLearn)
library(caret)
data(vowel.train)
install.packages("caret")
data(vowel.train)
data(vowel.test)
dim(vowel.train); dim(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
install.packages("gbm")
install.packages("gbm")
install.packages("ElemStatLearn")
library(gbm)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
dim(vowel.train); dim(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
install.packages("pbkrtest")
install.packages("pbkrtest")
setRepositories()
ap <- available.packages()
ap
install.packages("caret")
library(gbm)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
dim(vowel.train); dim(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
install.packages("caret")
library(caret)
R version()
Rversion()
R.version()
r.version()
sessionInfo()
library(gbm)
library(ElemStatLearn)
library(caret)
install.packages("ggplot2")
install.packages("caret")
library(gbm)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
dim(vowel.train); dim(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.fit.rf <- train(y ~ .,
data = vowel.train,
method="rf")
train()
install.packages("nlme", lib="C:/Program Files/R/R-3.2.4revised/library")
library(gbm)
library(ElemStatLearn)
library(caret)
install.packages("pbkrtest")
install.packages("caret")
vowel.fit.rf <- train(y ~ ., data = vowel.train, method="rf")
help.search("train")
find("train")
getAnywhere("train")
library(caret)
require(caret)
library("caret", lib.loc="~/R/win-library/3.2")
library(gbm)
library(ElemStatLearn)
library(caret)
require(caret)
install.packages("train")
install.packages("caret")
install.packages("train")
library(gbm)
library(ElemStatLearn)
library(caret)
require(caret)
install.packages("minqa")
require(caret)
install.packages("nloptr")
library(caret)
install.packages("SparseMr")
install.packages(devtools)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("shiny")
rsconnect::setAccountInfo(name='gberkwitt', token='6188B4A778152630E8EB1B1DB8BFB997', secret='BlxoCuXHhrUh3SV1XyOXfw1cwefs8DzPSRAz8xc5')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='gberkwitt', token='6188B4A778152630E8EB1B1DB8BFB997', secret='BlxoCuXHhrUh3SV1XyOXfw1cwefs8DzPSRAz8xc5')
deployApp()
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('path/to/your/app')
deployApp()
library(manipulate)
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider (1,100))
manipulate(plot(1:x), x = slider (1, 100))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
demo(googleVis)
install.packages(googleVis)
library(googleVis)
install.packages('googleVis')
demo(googleVis)
demo('googleVis')
demo()
library(googleVis)
demo(googleVis)
library(shiny)
getwd()
setwd("C:/Users/tester/Documents/Data Science/9.Developing Data Products")
setwd("C:/Users/tester/Documents/Data Science/9. Developing Data Products")
getwd()
library(shiny)
setwd("C:/Users/tester/Documents/Data Science/9. Developing Data Products")
library(shiny)
fig.width <- 600
fig.height <- 250
shinyUI(pageWithSidebar(
headerPanel("Sampling and Standard Error"),
sidebarPanel(
sliderInput("pop.sd",
strong("Population standard deviation"),
min=0, max=4, value=2, step=.2, ticks=FALSE),
sliderInput("n.sample",
strong("Number of observations in a sample"),
min=1, max=100, value=20)
),
mainPanel(
div(plotOutput("population", width=fig.width, height=fig.height)),
div(plotOutput("sample", width=fig.width, height=fig.height)),
div(plotOutput("standard.error", width=fig.width, height=fig.height))
)
))
setwd("C:/Users/tester/Documents/Data Science/9. Developing Data Products/Project")
setwd("C:/Users/tester/Documents/Data Science/9. Developing Data Products/Project")
setwd("C:/Users/tester/Documents/Data Science/9. Developing Data Products/Course Project")
getwd()
setwd("C:/Users/tester/Documents/Data Science/9. Developing Data Products/Course Project")
library(shiny)
fig.width <- 600
fig.height <- 250
shinyUI(pageWithSidebar(
headerPanel("Sampling and Standard Error"),
sidebarPanel(
sliderInput("pop.sd",
strong("Population standard deviation"),
min=0, max=4, value=2, step=.2, ticks=FALSE),
sliderInput("n.sample",
strong("Number of observations in a sample"),
min=1, max=100, value=20)
),
mainPanel(
div(plotOutput("population", width=fig.width, height=fig.height)),
div(plotOutput("sample", width=fig.width, height=fig.height)),
div(plotOutput("standard.error", width=fig.width, height=fig.height))
)
))
))
))
library(shiny)
fig.width <- 600
fig.height <- 250
shinyUI(pageWithSidebar(
headerPanel("Sampling and Standard Error"),
sidebarPanel(
sliderInput("pop.sd",
strong("Population standard deviation"),
min=0, max=4, value=2, step=.2, ticks=FALSE),
sliderInput("n.sample",
strong("Number of observations in a sample"),
min=1, max=100, value=20)
),
mainPanel(
div(plotOutput("population", width=fig.width, height=fig.height)),
div(plotOutput("sample", width=fig.width, height=fig.height)),
div(plotOutput("standard.error", width=fig.width, height=fig.height))
)
))
fig.width <- 600
fig.height <- 250
shinyUI(pageWithSidebar(
headerPanel("Sampling and Standard Error"),
sidebarPanel(
sliderInput("pop.sd",
strong("Population standard deviation"),
min=0, max=4, value=2, step=.2, ticks=FALSE),
sliderInput("n.sample",
strong("Number of observations in a sample"),
min=1, max=100, value=20)
),
mainPanel(
div(plotOutput("population", width=fig.width, height=fig.height)),
div(plotOutput("sample", width=fig.width, height=fig.height)),
div(plotOutput("standard.error", width=fig.width, height=fig.height))
)
))
library(shiny)
shinyServer(function(input, output) {
output$population <- renderPlot({
x <- seq(-10, 10, length.out=1000)
pdf <- dnorm(x, 0, input$pop.sd)
plot(x, pdf, type="l", col="navy", lwd=3, main="Population", frame=FALSE)
})
output$sample <- renderPlot({
x <- rnorm(input$n.sample, 0, input$pop.sd)
x <- x[x > -10 & x < 10]
bins <- hist(x, breaks=seq(-10, 10, 1), col="#BBBBBB", xlim=c(-10, 10),
main="One Sample from the Population")
annot.height <- max(bins$count) / 2
sd.x = sd(x)
sem.x = sd(x) / sqrt(length(x))
lines(c(-sd.x, sd.x), rep(annot.height, 2), lwd=6, col="darkred")
lines(c(-sem.x, sem.x), rep(annot.height, 2), lwd=5, col="pink")
legend(-10, max(bins$count), c("+/- sd", "+/- sem"),
col=c("darkred", "pink"), lty=c(1, 1), lwd=c(4, 4),
box.lwd = 0, box.col = "white",bg = "white")
rug(x, col="navy", lwd=2, ticksize=.05)
})
output$standard.error <- renderPlot({
sem <- input$pop.sd / sqrt(input$n.sample)
x <- rnorm(10000, 0, sem)
hist(x, col="#BBBBBB", xlim=c(-10, 10), freq=FALSE,
main="Distribution of Means from Many Samples")
x.pos <- seq(-10, 10, length.out=1000)
pdf <- dnorm(x.pos, 0, sem)
lines(x.pos, pdf, col="navy", lwd=2)
annot.height <- max(pdf) / 2
lines(c(-sem, sem), rep(annot.height, 2), lwd=4, col="pink")
legend(-10, max(pdf), "+/- sd",
col="pink", lty=1, lwd=4,
box.lwd = 0, box.col = "white",bg = "white")
})
})
runApp()
install.packages(rsconnect)
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='gberkwitt', token='6188B4A778152630E8EB1B1DB8BFB997', secret='BlxoCuXHhrUh3SV1XyOXfw1cwefs8DzPSRAz8xc5')
library(rsconnect)
rsconnect::deployApp("C:/Users/tester/Documents/Data Science/9. Developing Data Products/Course Project")
rsconnect::deployApp('C:/Users/tester/Documents/Data Science/9. Developing Data Products/Course Project')
getwd()
rsconnect::setAccountInfo(name='gberkwitt', token='6188B4A778152630E8EB1B1DB8BFB997', secret='BlxoCuXHhrUh3SV1XyOXfw1cwefs8DzPSRAz8xc5')
library(rsconnect)
rsconnect::deployApp("C:/Users/tester/Documents/Data Science/9. Developing Data Products/Course Project")
rsconnect::deployApp("C:/Users/tester/Documents/Data Science/9. Developing Data Products/Course_Project")
